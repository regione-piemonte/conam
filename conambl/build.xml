<?xml version="1.0" encoding="UTF-8"?>
<!--
   * SPDX-License-Identifier: EUPL-1.2
   * Copyright Regione Piemonte - 2020
-->
<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="."
         default="default"
         name="conambl"
         xmlns:ivy="antlib:fr.jayasoft.ivy.ant" >

	<description>Build file per il progetto: [conambl]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />
	<property file="buildfiles/${target}.properties" />

	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${libext}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/classes" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />
		<mkdir dir="${build}/report/temp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default"
	        description="Eseguire il build per l'environment
	                     specificato a linea di comando con
	                     -Dtarget=${target} o per tutti gli
	                     environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets"
	        description="Esegue il build per le varie distribuzioni in sequenza.">
		<!--PROTECTED REGION ID(R-1748880042) ENABLED START-->
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all"
	        description="Costruisce il tar per la distribuzione." >
		<echo message="====== Creating distribution for ${target} ..."/>
		<echo message="====== Basedir: ${build}/archives/${target} ..."/>
		<!--PROTECTED REGION ID(R153496181) ENABLED START-->
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare
		     nel processo di distribuzione del tar -->
		<!--PROTECTED REGION END-->
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar"
		     basedir="${build}/archives/${target}"
		     includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
				<!--PROTECTED REGION ID(R1043199259) ENABLED START-->
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				<!--PROTECTED REGION END-->
			</tarfileset>
		</tar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies"
	        description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies"
	        depends="resolve-dependencies"
	        description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-dependencies"
	        description="Compila tutti i sorgenti.">

		<echo message="===> Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${src}/java" destdir="${build}/classes"
		       optimize="on" deprecation="on"
		       compiler="modern"
		       debug="on" debuglevel="lines,vars,source">
			<classpath refid="library.ref" />
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
		
		<copy file="buildfiles/${target}.properties" 
			tofile="${temp}/conf/web/conambl/rest/WEB-INF/classes/application.properties">
		</copy>
		
		<copy todir="${build}/classes">
					<fileset dir="${temp}/conf/web/conambl/rest/WEB-INF/def_pa_pd" />
		</copy>
				
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate"
	        description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
			<copy todir="build/temp/conf" overwrite="true">
		<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config"
	        description="Predispone le configurazioni dipendenti dall&apos;ambiente." >

	  
		<!-- Gestione replace delle variabile d'ambiente create dal generatore -->
		<condition property="xsrffilter.disabled" value="false">
		      <equals arg1="${xsrffilter.disabled}" arg2="$${xsrffilter.disabled}" />
		</condition>
		    <replace dir="${build}/temp/conf/web/" token="@@@XSRFFILTER.DISABLED@@@" value="${xsrffilter.disabled}"/>
		
		
		<replace dir="${build}/temp/conf/web/" token="@shibbTestMode@" value="${shibbTestMode}"/>
		<replace dir="${build}/temp/conf/web/" token="@irideAPP@" value="${irideAPP}"/>
		<replace dir="${build}/temp/conf/web/" token="@defpd_stas_url@" value="${defpd_stas_url}"/>
		
		
		<copy todir="${build}/archives/${target}">
		  		<fileset file="${temp}/conf/tar/conambl-ds.xml"/>
		</copy> 

		
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all"
	        description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-ear" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear"
            depends="environment-recreate, environment-config, compile-all, package-commons-jar, 
                     package-all-ws-wars"
            description="costruisce l&apos;ear">

		<!-- librerie infrastrutturali o client di servizi fruiti -->
		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib}" includes="${ear-libs-filter} ${ear-custom-libs-filter}" />
			<fileset dir="${build}/archives/${target}" includes="*common.jar" />
		</copy>

		<ear appxml="${temp}/conf/ear/application.xml"
		     destfile="${build}/archives/${target}/${ear-file-name}.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war,*.properties" excludes="*client*.jar,*common.jar" />
			<fileset dir="${temp}/${target}">
				<include name="**/*" />
			</fileset>
			<metainf dir="${temp}/conf/ear/" includes="jboss-deployment-structure.xml" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Version" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all-ws-wars                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all-ws-wars"
	        description="Costruisce i war di tutti i web services">
		<!-- richiamo costruzione war backend REST  -->
		<antcall target="_package-ws-war">
			<param name="component.name" value="conam"/>
			<param name="service.name" value="conambl"/>
			<param name="binding.code" value="rest"/>
			<param name="service.type" value="appl"/>
		</antcall>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: _package-ws-war                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_package-ws-war"
	        description="Costruisce il war per un singolo web service">
		<!-- prende in input i parametri: component.name, service.name, binding.code, service.type, service.ver (deve essere a 2 cifre!!!) -->

        
				<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
				     webxml="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/web.xml"
				     roundup="false">
					<webinf dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/">
						<include name="*.xml" />
						<include name="*.properties" />
						<include name="/classes/*.properties" />
					</webinf>
					<classes dir="${build}/classes">
						<!-- <include name="it/csi/*/conambl/business/${service.name}/**"/> -->
					    <include name="it/csi/*/conambl/**"/>
						<include name="defpd_*.xml"/>
					</classes>
					
		
					<classes dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes">
						<include name="*.xml"/>
						<include name="*.properties"/>
				    </classes>
				    
					<lib dir="${lib}" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}" />
					<lib dir="${libext}" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}"/>
					
					
					<!-- se sono presenti risorse web statiche vengono inserite nel pacchetto
					     es. distribuizone webpack gia' buildata della parte client di una 
					     Single Page Application -->
					<fileset dir="${src}/web/${component.name}/${binding.code}" includes="**"></fileset>
				</war>

	</target>

	

	

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-commons-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-commons-jar" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/conambl-common.jar"
		     basedir="${build}/classes"
		     includes="it/csi/test/conambl/business/**,
		               it/csi/test/conambl/integration/**,
		               it/csi/test/conambl/util/**">
		
			<exclude name="it/csi/test/conambl/business/be/**" />
			<exclude name="it/csi/test/conambl/integration/be/**" />
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee."
	        depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache"
	        description="Rimuove la cartella di cache di Ivy e la lib.">
		<delete dir="${build}/cache" failonerror="no" />
		<delete dir="${lib}" failonerror="no" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp"
	        description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives"
	        description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist"
	        description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes"
	        description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc"
	        description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp"
	        description="Rimuove la cartella temporanea delle jsp compilate.">
	<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf"
	        description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom"
	        description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')" >

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init"
	        description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java."/>
	</target>
	
	<!-- DEPLOY JBoss in locale -->
	<target name="_deploy-local-jboss" description="deploy ear in locale" depends="clean-archives, clean-classes, clean-dist, clean-temp, distribution">
	  <echo message="Deploy ${build}/archives/${target}/${ear-file-name}.ear su JBoss in locale " />
		 <copy todir="${jboss.deploy.dir}" overwrite="true">
			<fileset file="${build}/archives/${target}/${ear-file-name}.ear" />
		 </copy>
	  <echo message="${ear-file-name}.ear copiato !!!" />
	</target>
	
	<!--build in dev -->
	<target name="deploy-dev"
			        description="effettua il deploy in dev, specificare come target dev">
				<antcall target="build-dev-frontend" />
				<var name="target" value="dev"/> 
		 		<echo message="target = ${target}" />
			  	<antcall target="default" />
			  <echo>::::::::copyFileToServer Example::::::::::::</echo>
			<scp file="${build}/archives/dev/conambl.ear" todir="${build_remote_machine}"  trust="true"/>
	</target>
		
	<target name="build-dev-frontend" description="effettua il deploy del fe per ambiente dev">
				<echo>clean file frontend</echo>
				<delete includeemptydirs="true">
			  		<fileset dir="${srcweb}/rest" includes="**/*"/>
				</delete>
			 	
				<echo>inizio build frontend</echo>
				<exec dir="${build_local_frontend_path}" executable="cmd.exe">
		         	<arg line="/c npm run build_dev"/>
		        </exec>
				
				<echo>sposto i file nel be </echo>
				<move todir="${srcweb}/rest">
				  <fileset dir="${build_local_frontend_path}/dist"/>
				</move>
	</target>


	<target name="compile-report-class" depends="init,load-dependencies"
		        description="Compila solo le classi relative al report.">

			<delete dir="${build}/report/temp/it" />
		
			<echo message="===> Target: ${target}" />

			<!-- compilazione dei sorgenti -->
			<javac srcdir="${src}/java/it/csi/conam/conambl/jasper" destdir="${build}/report/temp"
			       optimize="on" deprecation="on"
			       compiler="modern"
			       debug="on" debuglevel="lines,vars,source">
				<classpath refid="library.ref" />
			</javac>
		
			<jar destfile = "${build}/report/report.jar"
		   			basedir = "${build}/report/temp"
		   			includes = "**" />
	</target>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	
	
	<!-- Generazione STUBS -->
		<target name="_genallstubs-fad" description="generazione stub axis 1.4" depends="init">	
			<echo message="generazione stub axis 1.4 per servizi" />
			
			
			<taskdef resource="axis-tasks.properties" classpathref="library.ref"/>
			<mkdir dir="${build}/client"/>
			<echo message="wsdl2java" />
								
			<axis-wsdl2java
				output="${build}/client"
				verbose="true"
				url="${stadoc.wsdl}">
				
				<mapping
					namespace="urn:stadocStadoc"
					package="it.csi.conam.conambl.integration.stadoc">
				</mapping>
				
				<mapping
					namespace="http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"
					package="it.csi.conam.conambl.integration.stadoc">
				</mapping>	
				<mapping
					namespace="http://api.coopdiag.csi.it"
					package="it.csi.conam.conambl.integration.stadoc">
				</mapping>
				
			</axis-wsdl2java>
			
			<!--
			<antcall target="_wsdl2java">
						<param name="url.wsdl" value="http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc?wsdl"/>
						<param name="package" value="it.csi.conam.conambl.integration.stadoc"/>
						<param name="namespace" value="urn:stadocStadoc"/>
						
			</antcall>
			<antcall target="_wsdl2java">
				<param name="url.wsdl" value="http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc?wsdl"/>
				<param name="package" value="it.csi.conam.conambl.integration.stadoc"/>
				<param name="namespace" value="http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"/>
			</antcall>
			<antcall target="_wsdl2java">
				<param name="url.wsdl" value="http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc?wsdl"/>
				<param name="package" value="it.csi.conam.conambl.integration.stadoc"/>
				<param name="namespace" value="http://api.coopdiag.csi.it"/>
			</antcall>
			-->
			
		</target>
	
	
	
	
	<target name="_wsdl2java" description="generazione stub axis 1.4">
			<echo message="url.wsdl= ${url.wsdl}" />
			
					
			<taskdef resource="axis-tasks.properties" classpathref="library.ref"/>
				
			<mkdir dir="${build}/client"/>
			<mkdir dir="${build}/client/classes"/>
				
			<echo message="wsdl2java" />
				
			<axis-wsdl2java
			  	output="${build}/client"
			  	verbose="true"
			  	url="${url.wsdl}">
				<mapping
				 	namespace="${namespace}"
				    package="${package}" />
			</axis-wsdl2java>
				
				

				
			</target>
	

	<target name="ppay_wsdl2java" description="generazione stub axis 1.4">
			<echo message="url.wsdl= ${ppay.wsdl}" />
			
					
			<taskdef resource="axis-tasks.properties" classpathref="library.ref"/>
				
			<mkdir dir="${build}/client"/>
			<mkdir dir="${build}/client/classes"/>
				
			<echo message="wsdl2java" />
				
			<axis-wsdl2java
			  	output="${build}/client"
			  	verbose="true"
			  	url="${ppay.wsdl}">
				<mapping
				 	namespace="${namespace}"
				    package="${package}" />
			</axis-wsdl2java>
				
				

				
			</target>
	

</project>
